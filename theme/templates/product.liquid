<main role="main">
  <div class="sheet">
    <div class="sheet-content" itemscope itemtype="http://schema.org/Product">
          
      <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
      <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">
      
      <header class="sheet-header product-header">
        <h1 itemprop="name">{{ product.title }}</h1>
      </header>
      
      <section class="product-images">
        {% comment %} TODO: product images {% endcomment %}
        <div class="product-image-main">
          {% assign featured_image = product.selected_or_first_available_variant.featured_image | default: product.featured_image %}
          
          <img src="{{ featured_image | img_url: '1024x1024' }}" alt="{{ featured_image.alt | escape }}">
          
          {% comment %}
            Trying to use srcset but it's not totally working properly yet
<!--
          <img src="{{ featured_image | img_url: 'medium' }}"
               srcset="{{ featured_image | img_url: 'medium' }} 240w,
                       {{ featured_image | img_url: 'large' }} 480w,
                       {{ featured_image | img_url: 'grande' }} 600w,
                       {{ featured_image | img_url: '1024x1024' }} 1024w,
                       {{ featured_image | img_url: '2048x2048' }} 2048w"
               sizes="(min-width: 768px) 40%,
                      100%"
               alt="{{ featured_image.alt | escape }}">
-->
          {% endcomment %}
        </div>
        <ul class="product-image-thumbs">
          
          {% comment %}
            Show thumbs for product image gallery.
            
            Collect any variant id (first) associated with each thumb and include it as a data-attr to be used with the image switcher.
            Clicking a thumb to change the image also changes the selected variant if it is linked to it.
          {% endcomment %}
            
          {% for thumb in product.images %}
            {% assign image_variant_id = false %}
            {% if thumb.attached_to_variant? %}
              {% assign image_variant_id = thumb.variants.first.id %}
            {% endif %}
            <li><a href="{{ thumb | img_url: 'master' }}" data-gallery-main=".product-image-main img" {% if image_variant_id %}data-variant-id="{{ image_variant_id }}"{% endif %}><img src="{{ thumb | img_url: 'large' }}" alt="{{ thumb.alt | escape }}"></a></li>
          {% endfor %}
        </ul>
      </section>
      
      <section class="product-details" itemprop="offers" itemscope itemtype="http://schema.org/Offer">
        {% comment %}
          Get first variant, or deep linked one
        {% endcomment %}
        {% assign variant = product.selected_or_first_available_variant %}
        
        <meta itemprop="priceCurrency" content="{{ shop.currency }}">
        {% unless variant.sku == blank %}<meta itemprop="identifier" content="sku:{{ variant.sku }}" />{% endunless %}
        <link itemprop="availability" href="http://schema.org/{% if variant.available %}InStock{% else %}OutOfStock{% endif %}">
        
        <div class="product-details-content">          
          <div class="product-price">
            <p class="compare-at-price">
              {% if variant.compare_at_price > variant.price %}
                {% assign compare_at_price = variant.compare_at_price | money %}
                {% assign compare_at_price_with_currency = variant.compare_at_price | money_with_currency %}
                {{ 'products.price.compare_at_price_html' | t: price: price, price_with_currency: price_with_currency }}
              {% endif %}
            </p>
            <p class="price" itemprop="price">
              {% assign price = variant.price | money %}
              {% assign price_with_currency = variant.price | money_with_currency %}
              {% if variant.compare_at_price > variant.price %}
                {{ 'products.price.sale_price_html' | t: price: price, price_with_currency: price_with_currency }}
              {% else %}
                {{ 'products.price.standard_price_html' | t: price: price, price_with_currency: price_with_currency }}
              {% endif %}
            </p>
          </div>
          
          {% comment %} TODO: sale badges {% endcomment %}
          
          <form class="add-to-cart-form" id="add-to-cart" action="/cart/add" method="post" enctype="multipart/form-data">
            <select name="id" id="product-select">
            {% for variant in product.variants %}
              {% if variant.available %}
                <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>
              {% else %}
                <option disabled="disabled">
                  {{ variant.title }} - {{ 'products.product.sold_out' | t }}
                </option>
              {% endif %}
            {% endfor %}
            </select>

            <div class="form-group product-quantity">
              <label for="quantity" class="quantity-selector">{{ 'products.form.quantity' | t }}</label>
              <input type="number" id="quantity" name="quantity" value="1" min="1" class="quantity-selector">
            </div>
  
            <input type="submit" name="add" class="btn-add-to-cart" value="{{ 'products.buttons.add_to_cart' | t }}">
          </form>
          <div class="add-to-cart-message hidden" id="add-to-cart-message"></div>
        </div>
      </section>
      
      <section class="product-description" itemprop="description">
        {{ product.description }}
        {% comment %} TODO: product tags, vendor, type, etc. {% endcomment %}
      </section>
      
    </div>
  </div>
</main>

{% include 'site_aside' %}

{{ 'option_selection.js' | shopify_asset_url | script_tag }}
<script>
  // collect product details for use within js for things like linked product options
  var Bsify = Bsify || {};
  Bsify.product = {{ product | json }};
  Bsify.product_selector_id = 'product-select';
  Bsify.product_form_id = 'add-to-cart';
  Bsify.product_form_message_id = 'add-to-cart-message';
  Bsify.add_to_cart_message_timeout = 15000; // 15 secs
  // Set to false if you don't want to use linked product options
  Bsify.linked_product_options = true;
  // Set to false if you don't want to use ajax add to cart
  Bsify.ajax_add_to_cart = true;
  // Button translation strings
  Bsify.unavailable_button_text = "{{ 'products.buttons.unavailable' | t }}";
  Bsify.add_to_cart_button_text = "{{ 'products.buttons.add_to_cart' | t }}";
  Bsify.added_to_cart_button_text = "{{ 'products.buttons.added_to_cart' | t }}";
  Bsify.adding_to_cart_button_text = "{{ 'products.buttons.adding_to_cart' | t }}";
  Bsify.add_another_button_text = "{{ 'products.buttons.add_another' | t }}";
  Bsify.sold_out_button_text = "{{ 'products.buttons.sold_out' | t }}";
  Bsify.after_product_added_message_html = "{{ 'products.form.after_product_added_message_html' | t: item_title: '[item_title]', collection_url: '[collection_url]' }}";
  Bsify.after_product_added_message_collection_url = "{{ 'products.form.after_product_added_message_collection_url' | t }}";

  // price strings uses a marker that is replaced so as to preserve Shopify translations
  {% assign price_marker = '[price]' %}
  var standard_price_str = "{{ 'products.price.standard_price_html' | t: price: price_marker, price_with_currency: price_marker }}";
  var compare_at_str = "{{ 'products.price.compare_at_price_html' | t: price: price_marker, price_with_currency: price_marker }}";
  var sale_price_str = "{{ 'products.price.sale_price_html' | t: price: price_marker, price_with_currency: price_marker }}";
  var unavailable_str = "{{ 'products.price.unavailable' | t }}"
  
  // Select callback is called every time a variant selector is changed
  var select_callback = function(variant, selector) {
    // collect price and button elements
    var $product_price_ele = $('.product-price');
    var $compare_at_price_ele = $product_price_ele.find('.compare-at-price');
    var $price_money_ele = $product_price_ele.find('.price');
    var $add_to_cart_button = $('.btn-add-to-cart');
    
    var money_format = "{{ shop.money_with_currency_format }}";

    if (variant) {
      // get formated variant price and set it
      var price_formatted = Shopify.formatMoney(variant.price, money_format);
      var standard_price = standard_price_str.replace('[price]', price_formatted);
      $price_money_ele.removeClass('text-muted').html(standard_price);
     
      // Set the compare at price if we have it
      if (variant.compare_at_price > 0) {
        // update price with sale price string
        var sale_price = sale_price_str.replace('[price]', price_formatted);
        $price_money_ele.html(sale_price);
        
        // update compare at price
        var compare_at_price_formatted = Shopify.formatMoney(variant.compare_at_price, money_format);
        var compare_at = compare_at_str.replace('[price]', compare_at_price_formatted);
        $compare_at_price_ele.html(compare_at).removeClass('hidden');
        
      } else {
        $compare_at_price_ele.addClass('hidden');
      }
     
      if (variant.available) {
        $add_to_cart_button.removeClass('disabled').attr('disabled', false).val(Bsify.add_to_cart_button_text);
       
        if (Bsify.cart_has_variant !== undefined && Bsify.cart_has_variant(variant.id)) {
          $add_to_cart_button.val(Bsify.add_another_button_text);
        }
       
      } else { // variant is sold out
        $add_to_cart_button.addClass('disabled').attr('disabled', 'disabled').val(Bsify.sold_out_button_text);
        // TODO: add notify me form
      }
     
      // Switch the main image if the variant has one
      if (variant.featured_image) {
        if (Bsify.switch_image !== undefined) {
          var mainImageElement = $('.product-image-main img')[0];
          Bsify.switch_image(mainImageElement, variant.featured_image.src);
        }
      } 
    } else {
      // The variant dosn't exist so unset details
      $add_to_cart_button.addClass('disabled').attr('disabled', 'disabled').val(Bsify.unavailable_button_text);
      $price_money_ele.addClass('text-muted').text(unavailable_str);
      $compare_at_price_ele.addClass('hidden');
    }
  };

  jQuery(function($) {
    new Shopify.OptionSelectors(Bsify.product_selector_id, {
      product: {{ product | json }},
      onVariantSelected: select_callback,
      enableHistoryState: true
    });

    // Add label if only one product option and it isn't 'Title'. Could be 'Size'.
    {% if product.options.size == 1 and product.options.first != 'Title' %}
      $('.selector-wrapper:eq(0)').prepend('<label for="productSelect-option-0">{{ product.options.first | escape }}</label>');
    {% endif %}

    // Hide selectors if we only have 1 variant and its title contains 'Default'.
    {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}
      $('.selector-wrapper').hide();
    {% endif %}
  });
</script>